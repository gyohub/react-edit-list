"use strict";(self.webpackChunkreact_edit_list=self.webpackChunkreact_edit_list||[]).push([[328],{8328:(e,n,t)=>{t.r(n),t.d(n,{default:()=>a});const a="import * as React from 'react';\nimport ReactEditList, * as REL from 'react-edit-list';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../example.css';\n\nconst data = [\n    {id: 1, product: 'Desk', type: '1', price: 100, stock: 20},\n    {id: 2, product: 'Printer', type: '1', price: 500, stock: 10},\n    {id: 3, product: 'Paper', type: '2', price: 5, stock: 2000},\n    {id: 4, product: 'Chair', type: '1', price: 50, stock: 50},\n    {id: 5, product: 'Computer', type: '1', price: 1000, stock: 20},\n    // There can be optional values\n    {id: 6, product: 'Rent', type: undefined, price: 2000, stock: undefined}\n];\nconst schema: REL.Schema = [\n    {name: 'id', type: 'id'},\n    {name: 'product', type: 'string'},\n    {\n        name: 'type',\n        type: [\n            // Enum types can have a null value\n            {value: undefined, name: ''},\n            {value: '1', name: 'capex'},\n            {value: '2', name: 'consumable'}\n        ]\n    },\n    {name: 'price', type: 'number'},\n    {name: 'stock', type: 'number'}\n];\n\n// Loading can be asynchronous\nconst getData = () => Promise.resolve(data);\n\n// Every operation can be denied\nfunction isValid(item: REL.Row): boolean {\n    if (item.product === undefined || item.price === undefined) {\n        alert('Product and price are mandatory');\n        return false;\n    }\n    if (item.price > 2000) {\n        alert('Price is limited to 2000€');\n        return false;\n    }\n    return true;\n}\n\nexport default function Advanced() {\n    const ref = React.useRef<HTMLElement>();\n    return (\n        <div>\n            <button\n                className='btn btn-primary mb-4'\n                onClick={() => {\n                    // A manual refresh (forcing the component to call onLoad)\n                    // can be triggered by sending a keyboard event to the main element\n                    ref.current?.dispatchEvent(\n                        new KeyboardEvent('keydown', {key: 'R', altKey: true, bubbles: true})\n                    );\n                }}\n            >\n                Reload\n            </button>\n            <ReactEditList\n                ref={ref}\n                schema={schema}\n                onLoad={getData}\n                onUpdate={(item) => {\n                    // The operation can be denied\n                    if (!isValid(item)) return false;\n\n                    // Call your API here\n                    console.log('UPDATE', item);\n                }}\n                onDelete={(item) => {\n                    // The operation can be denied\n                    if (!confirm('Are you sure you want to delete it?')) return false;\n\n                    // Call your API here\n                    console.log('DELETE', item);\n                }}\n                onInsert={(item) => {\n                    // The operation can be denied\n                    if (!isValid(item)) return false;\n\n                    // Call your API here\n                    console.log('INSERT', item);\n\n                    // The object can be modified before insertion\n                    // This is the ideal place to assign unique ids\n                    return Promise.resolve({...item, id: Math.round(Math.random() * 1e6)});\n                }}\n                format={{\n                    // Some fields can have a custom display element\n                    price: (props) => (\n                        <React.Fragment>\n                            {props.value !== undefined ? `${props.value} €` : undefined}\n                        </React.Fragment>\n                    )\n                }}\n                onChange={(items) => {\n                    // Process the whole list\n                    console.log('DATA', items);\n                }}\n                // Headers are customizable\n                headers={{\n                    price: <span>price (€)</span>\n                }}\n                // You can provide arbitrary props to be passed to the `input` element\n                editProps={{\n                    price: {min: 5, max: 2000, step: 5},\n                    stock: {min: 0}\n                }}\n                className='table table-striped table-fixed align-middle'\n                headClassName='table-light'\n                inputClassName='w-100'\n                thClassName={{\n                    product: 'col-3',\n                    type: 'col-2',\n                    price: 'col-3',\n                    stock: 'col-1',\n                    // More place for the buttons\n                    buttons: 'col-3'\n                }}\n                // You can provide arbitrary elements for buttons\n                btnValidateElement={<button className='btn btn-primary'>YES!</button>}\n                btnCancelElement={<button className='ms-2 btn btn-secondary'>NEVER</button>}\n                btnDeleteElement={<button className='btn btn-danger'>REMOVE</button>}\n                // New items can have default values\n                defaultValues={{\n                    type: 1,\n                    price: 5,\n                    stock: 10\n                }}\n                // The element used for the empty row can be configured\n                filler={<React.Fragment>&#8230;</React.Fragment>}\n            />\n        </div>\n    );\n}\n"}}]);