"use strict";(self.webpackChunkreact_edit_list=self.webpackChunkreact_edit_list||[]).push([[528],{528:(e,n,t)=>{t.r(n),t.d(n,{default:()=>a});const a="import * as React from 'react';\nimport ReactEditList, * as REL from 'react-edit-list';\n\n// This example uses sortablejs to implement drag&drop reordering\nimport Sortable from 'sortablejs';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../example.css';\n\n// This is the example data\nlet data = [\n    {id: 1, product: 'Desk', type: '1', price: 100, stock: 20},\n    {id: 2, product: 'Printer', type: '1', price: 500, stock: 10},\n    {id: 3, product: 'Paper', type: '2', price: 5, stock: 2000},\n    {id: 4, product: 'Chair', type: '1', price: 50, stock: 50},\n    {id: 5, product: 'Computer', type: '1', price: 1000, stock: 20}\n];\n\n// This is the schema\nconst schema: REL.Schema = [\n    {name: 'id', type: 'id'},\n    {name: 'product', type: 'string'},\n    {\n        name: 'type',\n        type: [\n            {value: '1', name: 'capex'},\n            {value: '2', name: 'consumable'}\n        ]\n    },\n    {name: 'price', type: 'number'},\n    {name: 'stock', type: 'number'}\n];\n\nexport default function Reordering() {\n    const ref = React.useRef<HTMLElement>();\n    React.useLayoutEffect(() => {\n        const sortable = Sortable.create(document.getElementsByClassName('sortable-items')[0], {\n            // We don't want to reorder the empty insertion row\n            draggable: '.draggable',\n            // You need this for toArray() to work\n            dataIdAttr: 'dataid',\n            onSort: () => {\n                // You will need to keep a local copy of the data\n                data = sortable.toArray().map((i) => data[i]);\n\n                // Call your API here\n                console.log('REORDER', data);\n\n                // And trigger a refresh with it\n                ref.current?.dispatchEvent(\n                    new KeyboardEvent('keydown', {\n                        key: 'R',\n                        altKey: true,\n                        bubbles: true\n                    })\n                );\n            }\n        });\n    });\n    return (\n        <React.Fragment>\n            <div className='m-3 fw-bold'>You can reorder the items by dragging and dropping</div>\n            <ReactEditList\n                schema={schema}\n                onLoad={() => data}\n                ref={ref}\n                onUpdate={(item) => {\n                    // Call your API here\n                    console.log('UPDATE', item);\n                }}\n                onDelete={(item) => {\n                    if (!confirm('Are you sure you want to delete it?')) return false;\n                    // Call your API here\n                    console.log('DELETE', item);\n                }}\n                onInsert={(item) => {\n                    // Call your API here\n                    console.log('INSERT', item);\n                }}\n                className='table table-dark table-rounded table-fixed align-middle'\n                headClassName='table-light'\n                inputClassName='w-100'\n                thClassName={{\n                    // These allow to fix the column widths\n                    product: 'col-4',\n                    type: 'col-3',\n                    price: 'col-2',\n                    stock: 'col-2',\n                    buttons: 'col-1'\n                }}\n                bodyClassName='sortable-items'\n                btnValidateClassName='btn btn-success p-0 m-0'\n                btnDeleteClassName='btn btn-danger py-0 px-1 m-0 mx-1'\n                btnCancelClassName='btn btn-secondary py-0 px-1 m-0 mx-1'\n                rowClassName='draggable'\n                insertClassName='not-draggable'\n                filler={<React.Fragment>&#8230;</React.Fragment>}\n            />\n        </React.Fragment>\n    );\n}\n"}}]);